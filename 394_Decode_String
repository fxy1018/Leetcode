```
Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".

```

class Solution(object):
    def decodeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        if s == '':
            return("")
        if s.isalpha():
            return(s)
        
        prefix = ''
        start = 0
        for i in range(len(s)):
            if s[i].isalpha():
                prefix += s[i]
            else:
                start = i
                break
        muliple = ''
        for j in range(start, len(s)):
            if s[j] in '1234567890':
                muliple += s[j]
            else:
                start = j
                break
        if muliple == '':
            muliple = 1
        else:
            muliple = int(muliple)
        count = 0
        sLeft = ''
        sRight = ''
        for i in range(start,len(s)):
            if s[i] == "[":
                count += 1
            elif s[i] == "]":
                count -=1
                if count ==0:
                    sLeft = s[start+1:i]
                    sRight = s[i+1:]
                    break
                    
        return(prefix + muliple*self.decodeString(sLeft) + self.decodeString(sRight))
        
class Solution(object):
    def decodeString(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []
        res = ""
        for char in s:
            if char != "]":
                stack.append(char)
            else:
                tmp_s = ""
                while stack and stack[-1] not in "1234567890":
                    tmp_s = stack.pop() + tmp_s

                digit = ""
                while stack and stack[-1] in "1234567890": 
                    digit = stack.pop() + digit
                stack.extend([c for c in int(digit) * tmp_s[1:]])
        
        for char in stack:
            res += char
        return(res)
        
