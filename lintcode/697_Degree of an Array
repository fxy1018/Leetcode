'''
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:
Input: [1, 2, 2, 3, 1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:
Input: [1,2,2,3,1,4,2]
Output: 6

Target: find the smallest length of subarray containing all nums in the degree
Inquire: array, hash, pointer
Get the point: in order to get length, we need to know start and end location of the num, use hash to speed up the check time
*4
time: O(N)
space: O(N)
'''

class Solution:
    def findShortestSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #use two Hash, one to record degree and other one to record start and end index
        hash1 = {}
        hash2 = {}
        for i in range(len(nums)):
            n = nums[i]
            if n not in hash1:
                hash1[n] = 1
                hash2[n] = [i, i]
            else:
                hash1[n] = hash1[n] + 1
                hash2[n][1] = i
        
        degree = 0
        num = []
        for key in hash1:
            if hash1[key] > degree:
                num = [key]
                degree = hash1[key]
            elif hash1[key] == degree:
                num.append(key)
                
        res = len(nums)
        for n in num:
            res = min(res, hash2[n][1] - hash2[n][0] + 1)
        return(res)
