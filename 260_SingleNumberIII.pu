'''
Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

'''
class Solution:
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        #method1: hash
        numHash = {}
        res = []
        
        for n in nums:
            numHash[n] = numHash.get(n, 0) + 1
        for key in numHash:
            if numHash[key] == 1:
                res.append(key)
                
        return(res)
  class Solution:
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        #bit
        nXOR = nums[0]
        for n in nums:
            nXOR ^= n
        
        nXOR ^= nums[0]
        mask = 1
        move = 0
        for i in range(31):
            if mask & nXOR == mask:
                move = i
                break
            else:
                mask <<= 1
        
        groupA = []
        groupB = []
        mask = 1<<move
        
        for n in nums:
            if n & mask == 0:
                groupA.append(n)
            else:
                groupB.append(n)
                
        res1 = groupA[0]
        for n in groupA:
            res1 ^= n
        res1 ^= groupA[0]
        
        res2 = groupB[0]
        for n in groupB:
            res2 ^= n
        res2 ^= groupB[0]
        
                
        return([res1, res2])
        
        
  class Solution:
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        #bit: xor all nums and get result of xor of two numbers. If two numbers are different, there must be one digit is 1. Use this digit as filter and seperate number into two groups and each group contains one number which are only once as well as other twice number.
        
        nXOR = 0
        for n in nums:
            nXOR ^= n
            
        logBit = nXOR & -nXOR
        
        a =b = 0
        
        for n in nums:
            if n & logBit:
                a ^= n
            else:
                b^=n
        return([a,b])
